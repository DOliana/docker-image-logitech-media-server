schedules:
# cron: minute hour day-of-month month day-of-week
- cron: "0 1 * * 6"
  displayName: Weekly build
  branches:
    include:
    - master
  always: true

trigger:
  batch: true
  branches:
    include:
    - '*'

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  dockerImageName: 'doliana/logitech-media-server'
  conditionalBranchTag: ''
  actualLmsVersion: ''

stages:
- stage: Build
  displayName: Build image
  jobs:



#############################################################################################
# Build & Publish Logitech Media Server
#############################################################################################
  - job: Build_8_1
    displayName: Build & Publish 8.1
    variables:
      lmsVersion: '8.1'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: Set local variables
      inputs:
        targetType: inline
        script: |
          echo "##vso[task.setvariable variable=datetag]$(date +%Y_%m_%d)"
          
          echo "sourcebranch: '$BUILD_SOURCEBRANCH'"

          if [ "$BUILD_SOURCEBRANCH" != "refs/heads/master" ]; then
            CONDITIONALBRANCHTAG="-${BUILD_SOURCEBRANCHNAME}"
            echo "##vso[task.setvariable variable=conditionalBranchTag]$CONDITIONALBRANCHTAG"
            echo "not master - conditionalBranchTag set to $CONDITIONALBRANCHTAG"
          else
            CONDITIONALBRANCHTAG=""
            echo "master - conditionalBranchTag set to $CONDITIONALBRANCHTAG"
          fi

          PACKAGE_URL="http://www.mysqueezebox.com/update/?version=$(lmsVersion)&revision=1&geturl=1&os=debamd64"
          echo "lms url to extract version: $PACKAGE_URL"

          $ACTUALVER=$(wget -q -O - ${PACKAGE_URL} | grep -Po 'server_\K[^_]*')
          echo "using actual LMS Version $ACTUALVER"
          echo "##vso[task.setvariable variable=actualLmsVersion]$ACTUALVER"
    - task: Bash@3
      displayName: setup qemu
      inputs:
        targetType: 'inline'
        script: |
          sudo apt update && sudo apt install qemu-user-static -y
          sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset

          # get qemu-arm-static binaries for builds
          mkdir tmp
          pushd tmp &&
          curl -L -o qemu-arm-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/v5.2.0-2/qemu-arm-static.tar.gz &&
          tar xzf qemu-arm-static.tar.gz &&
          curl -L -o qemu-aarch64-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/v5.2.0-2/qemu-aarch64-static.tar.gz &&
          tar xzf qemu-aarch64-static.tar.gz &&
          popd
    - task: Docker@2
      displayName: login to docker
      inputs:
        containerRegistry: 'docker hub connection'
        command: 'login'


    - task: Docker@2
      displayName: build amd64 image
      inputs:
        command: build
        Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile.linux-amd64'
        buildContext: $(System.DefaultWorkingDirectory)
        containerRegistry: 'docker hub connection'
        repository: $(dockerImageName)
        arguments: |
          --build-arg VERSION=$(lmsVersion)
        tags: |
          $(datetag)$(conditionalBranchTag)-$(actualLmsVersion)-linux-amd64
    - task: Docker@2
      displayName: build arm32v7 image
      inputs:
        command: build
        Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile.linux-arm32v7'
        buildContext: $(System.DefaultWorkingDirectory)
        containerRegistry: 'docker hub connection'
        repository: $(dockerImageName)
        arguments: |
          --build-arg VERSION=$(lmsVersion)
        tags: |
          $(datetag)$(conditionalBranchTag)-$(actualLmsVersion)-linux-arm
    - task: Docker@2
      displayName: build arm64v8 image
      inputs:
        command: build
        Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile.linux-arm64v8'
        buildContext: $(System.DefaultWorkingDirectory)
        containerRegistry: 'docker hub connection'
        repository: $(dockerImageName)
        arguments: |
          --build-arg VERSION=$(lmsVersion)
        tags: |
          $(datetag)$(conditionalBranchTag)-$(actualLmsVersion)-linux-arm64

    - task: Docker@2
      displayName: push amd64 image
      inputs:
        command: push
        Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile.linux-amd64'
        buildContext: $(System.DefaultWorkingDirectory)
        containerRegistry: 'docker hub connection'
        repository: $(dockerImageName)
        tags: |
          $(datetag)$(conditionalBranchTag)-$(actualLmsVersion)-linux-amd64
    - task: Docker@2
      displayName: push arm32v7 image
      inputs:
        command: push
        Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile.linux-arm32v7'
        buildContext: $(System.DefaultWorkingDirectory)
        containerRegistry: 'docker hub connection'
        repository: $(dockerImageName)
        tags: |
          $(datetag)$(conditionalBranchTag)-$(actualLmsVersion)-linux-arm
    - task: Docker@2
      displayName: push arm64v8 image
      inputs:
        command: push
        Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile.linux-arm64v8'
        buildContext: $(System.DefaultWorkingDirectory)
        containerRegistry: 'docker hub connection'
        repository: $(dockerImageName)
        tags: |
          $(datetag)$(conditionalBranchTag)-$(actualLmsVersion)-linux-arm64


    - task: Bash@3
      displayName: Create and push manifest-list
      inputs:
        targetType: inline
        script:  |
          wget https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-amd64
          mv manifest-tool-linux-amd64 manifest-tool
          chmod +x manifest-tool
          
          IMAGE_TAG="$(conditionalBranchTag)-$(actualLmsVersion)"

          echo "pushing manifest for tag $(datetag)$IMAGE_TAG"

          ./manifest-tool push from-args --platforms linux/amd64,linux/arm,linux/arm64 --template "$(dockerImageName):$(datetag)$IMAGE_TAG-OS-ARCH" --target "$(dockerImageName):$(datetag)$IMAGE_TAG"

          echo "pushed manifest for tag $(datetag)$IMAGE_TAG"
          
          
          
          IMAGE_TAG="$(conditionalBranchTag)"

          echo "pushing manifest for tag latest$IMAGE_TAG"

          ./manifest-tool push from-args --platforms linux/amd64,linux/arm,linux/arm64 --template "$(dockerImageName):$(datetag)$IMAGE_TAG-OS-ARCH" --target "$(dockerImageName):latest$IMAGE_TAG"

          echo "pushed manifest for tag latest$IMAGE_TAG"
